# -*- coding: utf-8 -*-
"""SD-IF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1plkzoKzcF9uyEA5x4c5IMoxSa63O5iRR
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import zipfile 
from PIL import Image,ImageOps

zip = zipfile.ZipFile('Train.zip')
zip.extractall()

import os
cur_path = os.getcwd()
print(cur_path)

classs={
    1:'Negative',
    -1:'Positive'
}

data=[]
labels=[]

classes = 2
for i in range(classes):
    path = os.path.join(cur_path,'Train/',str(i))
    images = os.listdir(path)
    #print(images)
    for a in images:
        image = Image.open(path + '//'+ a)
        image=ImageOps.grayscale(image)
        image = image.resize((64,64))
        image = np.array(image)
        image=image.flatten()
        data.append(image)
        labels.append(i)
        print("{0} Loaded".format(a))

labels

len(labels)

labels[20001]

for i in range(len(labels)):
  if labels[i]==int('0'):
    labels[i]=int('-1')
  else:
    break

labels

#Converting lists into numpy arrays
data = np.array(data)
labels = np.array(labels)

len(data)

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.25, random_state=42)

from sklearn.ensemble import IsolationForest
clf = IsolationForest(max_samples=100000, random_state=42)
clf.fit(X_train,y_train)

y_pred = clf.predict(X_test)
y_pred=np.round(y_pred)
np.set_printoptions(precision=2)

print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

from sklearn.metrics import accuracy_score
print("Accuracy Score for the algorithm=>{}%".format(round(accuracy_score(y_test,y_pred)*100),2))
