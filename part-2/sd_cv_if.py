# -*- coding: utf-8 -*-
"""SD-CV-IF.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10OOzi6nyfgpWkNqqqrZdMbZwyPULrliu
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import zipfile 
from PIL import Image,ImageOps

zip = zipfile.ZipFile('Train.zip')
zip.extractall()

import os
cur_path = os.getcwd()
print(cur_path)

classs={
    1:'Negative',
    -1:'Positive'
}

data=[]
labels=[]

classes = 2
for i in range(classes):
    path = os.path.join(cur_path,'Train/',str(i))
    images = os.listdir(path)
    #print(images)
    for a in images:
        image = Image.open(path + '//'+ a)
        image=ImageOps.grayscale(image)
        image = image.resize((64,64))
        image = np.array(image)
        image=image.flatten()
        data.append(image)
        labels.append(i)
        print("{0} Loaded".format(a))

for i in range(len(labels)):
  if labels[i]==int('0'):
    labels[i]=int('-1')
  else:
    break

#Converting lists into numpy arrays
X= np.array(data)
y = np.array(labels)

from sklearn.model_selection import KFold
from sklearn.ensemble import IsolationForest
from sklearn.metrics import accuracy_score

scores = []
y_pred = []
temp=0
best_clf = IsolationForest(random_state=42)
cv = KFold(n_splits=10, random_state=42, shuffle=False)
for train_index, test_index in cv.split(X):
    print("Train Index: ", train_index, "\n")
    print("Test Index: ", test_index)

    X_train, X_test, y_train, y_test = X[train_index], X[test_index], y[train_index], y[test_index]
    best_clf.fit(X_train, y_train)
    y_pred=best_clf.predict(X_test)
    temp=accuracy_score(y_test,y_pred)*100
    scores.append(temp)

print(scores)

"""**Overall Score after performing Kfolds**


"""

mean=np.mean(scores)
print("The Overall Accuracy for the algorithm with K folds is {}".format(round(mean,2)))
